/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package SuperMarket;

import java.awt.event.*;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author vumma
 */
public class SuperMarketStaff extends javax.swing.JFrame {

    /** Creates new form SuperMarketStaff */
private InventoryDatabase id;
   
    private List<Product> prodList;
    private List<Product> displayList;
    private String ItemIDString;
    private DefaultListSelectionModel dlsm;
    private String empId;
    
    public SuperMarketStaff( String empID) throws SQLException {
        
        initComponents();
        ImageIcon icon = new ImageIcon(getClass().getResource("/Images/Icon.jpg"));
        this.setIconImage(icon.getImage());
        id = new InventoryDatabase();
        empId = empID;
        displayList = new ArrayList<>();
        
        RefreshList();
        dlsm = new DefaultListSelectionModel();
        ItemsList.setSelectionModel(dlsm);
        dlsm.addListSelectionListener(new SelectionHandler());
        ItemName.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent evt){
                GenerateDisplayList(ItemName.getText());
            }
        });
    }

    private void RefreshList() throws SQLException
    {

        prodList = id.getProductList();
        GenerateDisplayList("");
    }
    
    private void SetFields(Product prod)
    {
        ItemID.setText(prod.getProductID());
        ItemName.setText(prod.getName());
        AvailableQuantity.setText(prod.getQuantity()+"");
        Manufacturer.setText(prod.getManufacturer());
        MRP.setText(prod.getMRP()+"");
        Price.setText(prod.getCost()+"");
        Location.setText(prod.getLocation());
        Discount.setText(prod.getDiscount()+"");
        Description.setText(prod.getDescription());
    }
    
    private void SortTable()
    {
        DefaultRowSorter sorter = ((DefaultRowSorter)ItemsList.getRowSorter());
        ArrayList list = new ArrayList();
        list.add( new RowSorter.SortKey(1, SortOrder.ASCENDING) );
        sorter.setSortKeys(list);
        sorter.sort();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ItemID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemsList = new javax.swing.JTable();
        NewItemDetailsButton = new javax.swing.JButton();
        AddNewItemButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Location = new javax.swing.JTextField();
        Manufacturer = new javax.swing.JTextField();
        ItemName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Quantity = new javax.swing.JFormattedTextField();
        MRP = new javax.swing.JFormattedTextField();
        Price = new javax.swing.JFormattedTextField();
        Discount = new javax.swing.JFormattedTextField();
        AvailableQuantity = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Description = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ChangePassWordMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        VIewProfileMenuItem = new javax.swing.JMenuItem();

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Item ID: ");

        jLabel2.setText("Quantity:");

        ItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemIDEntered(evt);
            }
        });

        jLabel3.setText("Item name: ");

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.setToolTipText("Remove the specified quantity from the inventory");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        ItemsList.setAutoCreateRowSorter(true);
        ItemsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Stock", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemsList.setColumnSelectionAllowed(true);
        ItemsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ItemsList);
        ItemsList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (ItemsList.getColumnModel().getColumnCount() > 0) {
            ItemsList.getColumnModel().getColumn(0).setPreferredWidth(25);
            ItemsList.getColumnModel().getColumn(1).setPreferredWidth(200);
            ItemsList.getColumnModel().getColumn(2).setPreferredWidth(10);
            ItemsList.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        NewItemDetailsButton.setText("Enter new item details");
        NewItemDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewItemDetailsButtonActionPerformed(evt);
            }
        });

        AddNewItemButton.setText("Add new item");
        AddNewItemButton.setEnabled(false);
        AddNewItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewItemButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Manufacturer:");

        jLabel9.setText("MRP:");

        jLabel10.setText("Buying price:");

        jLabel11.setText("Location:");

        jLabel12.setText("Discount:");

        jLabel13.setText("Description:");

        jLabel14.setText("Available Quantity:");

        Location.setEnabled(false);

        Manufacturer.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Product details");

        Quantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###.###"))));

        MRP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        MRP.setEnabled(false);

        Price.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        Price.setEnabled(false);

        Discount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        Discount.setEnabled(false);

        AvailableQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        AvailableQuantity.setEnabled(false);

        jScrollPane2.setEnabled(false);

        Description.setColumns(20);
        Description.setLineWrap(true);
        Description.setRows(5);
        Description.setEnabled(false);
        Description.setOpaque(false);
        jScrollPane2.setViewportView(Description);

        jButton1.setText("Refresh list");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        ChangePassWordMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        ChangePassWordMenuItem.setText("Change Password");
        ChangePassWordMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangePassWordMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ChangePassWordMenuItem);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Log out");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("View");

        VIewProfileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        VIewProfileMenuItem.setText("Profile");
        jMenu3.add(VIewProfileMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                            .addComponent(ItemID)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(NewItemDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(AddNewItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 1, 1)))))
                                .addGap(66, 66, 66))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jLabel11)
                                                    .addComponent(jLabel12))
                                                .addGap(32, 32, 32))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addGap(44, 44, 44))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(8, 8, 8)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Location)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(MRP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Price))
                                            .addComponent(Manufacturer)
                                            .addComponent(Quantity)
                                            .addComponent(Discount)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(AvailableQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addComponent(jScrollPane2))))))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(MRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(Discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(AvailableQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(117, 117, 117)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NewItemDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddNewItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewItemDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewItemDetailsButtonActionPerformed
        // TODO add your handling code here:
        KeyListener kl[];
        kl = ItemName.getKeyListeners();
        ItemName.removeKeyListener(kl[0]);
        ItemID.setText("");
        ItemName.setText("");
        Quantity.setText("");
        Manufacturer.setText("");
        Manufacturer.setEnabled(true);
        MRP.setText("");
        MRP.setEnabled(true);
        Price.setText("");
        Price.setEnabled(true);
        Location.setText("");
        Location.setEnabled(true);
        Discount.setText("");
        Discount.setEnabled(true);
        Description.setText("");
        Description.setEnabled(true);
        Description.setOpaque(true);
        AddNewItemButton.setEnabled(true);
        NewItemDetailsButton.setEnabled(false);
        AddButton.setEnabled(false);
        RemoveButton.setEnabled(false);
    }//GEN-LAST:event_NewItemDetailsButtonActionPerformed
    
    private void GenerateDisplayList(String s)
    {
        displayList.clear();
        int i;
        
        for(i=0;i<prodList.size();i++)
        {
            if(prodList.get(i).getName().indexOf(s)>=0)
            {
                displayList.add(prodList.get(i));
            }
        }
        
        PopulateTable();
    }
    
    private void PopulateTable()       
    {
        DefaultTableModel tm;
        tm = (DefaultTableModel)ItemsList.getModel();
        tm.getDataVector().removeAllElements();
        tm.fireTableDataChanged();
        
        int i;

        for(i=0;i<displayList.size();i++)
        {
            tm.addRow(new Object[4]);
            tm.setValueAt(displayList.get(i).getProductID(), i, 0);
            tm.setValueAt(displayList.get(i).getName(), i, 1);
            tm.setValueAt(displayList.get(i).getQuantity(), i, 2);
            tm.setValueAt(displayList.get(i).getMRP(), i, 3);
        }
        
        SortTable();
    }
    
    private void AddNewItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewItemButtonActionPerformed
        // TODO add your handling code here:
        
        if("".equals(ItemName.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item name cannot be empty!");
        }
        else if("".equals(ItemID.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item ID cannot be empty!");
        }
        else if("".equals(Quantity.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item quantity cannot be empty!");
        }
        else if("".equals(Manufacturer.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item manufacturer cannot be empty!");
        }
        else if("".equals(MRP.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item MRP cannot be empty!");
        }
        else if("".equals(Price.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item cost price cannot be empty!");
        }
        else if("".equals(Location.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item location cannot be empty!");
        }
        else if("".equals(Discount.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item discount cannot be empty!");
        }
        else if(Float.parseFloat(Discount.getText())>100)
        {
            JOptionPane.showMessageDialog(null, "Discount cannot exceed 100%!");
        }
        else if("".equals(Description.getText()))
        {
            JOptionPane.showMessageDialog(null, "Item description cannot be empty!");
        }
        else
        {       
            Product newProd = new Product(ItemName.getText(),Manufacturer.getText(),ItemID.getText());  //name, manufacturer, ID
        
            newProd.setCost(Float.parseFloat(Price.getText())); 
            newProd.setLocation(Location.getText());
            newProd.setDescription(Description.getText());
            newProd.setDiscount(Float.parseFloat(Discount.getText()));
            newProd.setMRP(Float.parseFloat(MRP.getText()));
            newProd.setQuantity(Float.parseFloat(Quantity.getText()));
            ItemName.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent evt){
                GenerateDisplayList(ItemName.getText());
            }
            });
            
            String addProduct = "";
            try {
                addProduct = id.AddProduct(newProd);
            } catch (SQLException ex) {
                Logger.getLogger(SuperMarketStaff.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(addProduct.equalsIgnoreCase("SUCCESS"))
            {
                JOptionPane.showMessageDialog(null, "Item with given ID already exists in database!");
                Quantity.setText("");
                ItemID.setText("");
                ItemName.setText("");
                Manufacturer.setEnabled(false);
                Manufacturer.setText("");
                MRP.setEnabled(false);
                MRP.setText("");
                Manufacturer.setText("");
                Price.setEnabled(false);
                Price.setText("");
                Location.setEnabled(false);
                Location.setText("");
                Discount.setEnabled(false);
                Discount.setText("");
                AvailableQuantity.setText("");
                Description.setEnabled(false);
                Description.setText("");
                Description.setOpaque(false);
                AddNewItemButton.setEnabled(false);
                NewItemDetailsButton.setEnabled(true);
                AddButton.setEnabled(true);
                RemoveButton.setEnabled(true);
            
                GenerateDisplayList("");
                
            }
            else
            {
                prodList.add(newProd);
                Quantity.setText("");
                ItemID.setText("");
                ItemName.setText("");
                Manufacturer.setEnabled(false);
                Manufacturer.setText("");
                MRP.setEnabled(false);
                MRP.setText("");
                Manufacturer.setText("");
                Price.setEnabled(false);
                Price.setText("");
                Location.setEnabled(false);
                Location.setText("");
                Discount.setEnabled(false);
                Discount.setText("");
                AvailableQuantity.setText("");
                Description.setEnabled(false);
                Description.setText("");
                Description.setOpaque(false);
                AddNewItemButton.setEnabled(false);
                NewItemDetailsButton.setEnabled(true);
                AddButton.setEnabled(true);
                RemoveButton.setEnabled(true);
            
                GenerateDisplayList("");
            }
        }
    }//GEN-LAST:event_AddNewItemButtonActionPerformed
    
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        if(ItemName.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Item name cannot be empty!");
        }
        else if(ItemID.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Item ID cannot be empty!");
        }
        else if(Quantity.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Quantity cannot be empty!");
        }
        else
        {
            try {
                id.updateInventory(ItemID.getText(), Float.parseFloat(Quantity.getText()), InventoryDatabase.ADD);
            } catch (SQLException ex) {
                Logger.getLogger(SuperMarketStaff.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            int i;
            float newQuantity;
            for(i=0;i<prodList.size();i++)
            {
                if(prodList.get(i).getProductID().equals(ItemID.getText()))
                {
                    newQuantity = prodList.get(i).getQuantity()+Float.parseFloat(Quantity.getText());
                    AvailableQuantity.setText(newQuantity+"");
                    prodList.get(i).setQuantity(newQuantity);
                    ItemsList.setValueAt(newQuantity, ItemsList.getSelectedRow(), 2);
                    break;
                }
            }
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        // TODO add your handling code here:
        if(ItemName.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Item name cannot be empty!");
        }
        else if(ItemID.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Item ID cannot be empty!");
        }
        else if(Quantity.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Quantity cannot be empty!");
        }
        else
        {
            try {
                id.updateInventory(ItemID.getText(), Float.parseFloat(Quantity.getText()), InventoryDatabase.DELETE);
            } catch (SQLException ex) {
                Logger.getLogger(SuperMarketStaff.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            int i;
            float newQuantity;
        
            for(i=0;i<prodList.size();i++)
            {
                if(prodList.get(i).getProductID().equals(ItemID.getText()))
                {
                    newQuantity = prodList.get(i).getQuantity()-Float.parseFloat(Quantity.getText());
                
                    if(newQuantity>=0)
                    {
                        AvailableQuantity.setText(newQuantity+"");
                        prodList.get(i).setQuantity(newQuantity);
                        ItemsList.setValueAt(newQuantity, ItemsList.getSelectedRow(), 2);
                        break;
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Not sufficient items to remove!");
                    }
                }
            }
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void itemIDEntered(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemIDEntered
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            int i;
            
            for(i=0;i<ItemsList.getRowCount();i++)
            {
                if(ItemsList.getValueAt(i, 0).equals(ItemID.getText()))
                {
                    ItemsList.setRowSelectionInterval(i, i);
                    break;
                }
            }
        }
    }//GEN-LAST:event_itemIDEntered

    private void ChangePassWordMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangePassWordMenuItemActionPerformed
        final ChangePassword dialog;
        boolean done = false;
        String error = "";
        dialog = new ChangePassword(new JFrame(), true);
        dialog.setLocationRelativeTo(this);
        dialog.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent evt){
                dialog.setWantToChange(false);
            }
        });
        do{
        
        dialog.setVisible(true);
        if(dialog.wantToChange()){
            String reply = EmployeeDatabase.changePassword(empId, dialog.getOldPassword(), dialog.getNewPassword());
            if(reply.equalsIgnoreCase("SUCCESS")){
                JOptionPane.showMessageDialog(null, "Password successfully changed","",JOptionPane.INFORMATION_MESSAGE);
                done = true;
            }
            else{
                dialog.showError(reply);
                done = false;
            }
        }
        else{
            done = true;
        }
        }while(!done);
    }                                                      

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            //EmployeeDatabase.Logout(cl);
            Main.db.closeConnections();
            System.exit(0);
        } catch (SQLException ex) {
            Logger.getLogger(SalesClerk.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(-1);
        }
    }//GEN-LAST:event_ChangePassWordMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {
        // TODO add your handling code here:
        RefreshList();
    } catch (SQLException ex) {
        Logger.getLogger(SuperMarketStaff.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private class SelectionHandler implements ListSelectionListener{
        
        @Override
        public void valueChanged(ListSelectionEvent evt){
                if(!evt.getValueIsAdjusting()){
                    if(ItemsList.getSelectedRow()>=0)
                    {
                    ItemIDString = ItemsList.getValueAt(ItemsList.getSelectedRow(),0).toString();
                    
                    int i;
                    for(i=0;i<prodList.size();i++)
                    {
                        if(prodList.get(i).getProductID().equals(ItemIDString))
                        {
                            SetFields(prodList.get(i));
                            break;
                        }
                    }
                    }
                }
            }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton AddNewItemButton;
    private javax.swing.JFormattedTextField AvailableQuantity;
    private javax.swing.JMenuItem ChangePassWordMenuItem;
    private javax.swing.JTextArea Description;
    private javax.swing.JFormattedTextField Discount;
    private javax.swing.JTextField ItemID;
    private javax.swing.JTextField ItemName;
    private javax.swing.JTable ItemsList;
    private javax.swing.JTextField Location;
    private javax.swing.JFormattedTextField MRP;
    private javax.swing.JTextField Manufacturer;
    private javax.swing.JButton NewItemDetailsButton;
    private javax.swing.JFormattedTextField Price;
    private javax.swing.JFormattedTextField Quantity;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JMenuItem VIewProfileMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}


